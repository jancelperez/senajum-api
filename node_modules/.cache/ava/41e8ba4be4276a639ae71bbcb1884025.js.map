{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","servidor","context","url","imagen","getImagen","body","uri","publicId","json","deepEqual","console","log","options","method","description","src","UserId","userId","resolveWithFullResponse","response","is","statusCode","todo"],"mappings":"AAAA;AACA;;AACA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAEA;;;;;;AAHA;;;AANA;AAWA,cAAKA,UAAL,CAAgB,MAAMC,CAAN,IAAW;AACzB,MAAIC,WAAW,wCAAf;AACAD,IAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,QAAP,CAAtB;AACD,CAHD;;AAKA;;;AAbA;;;AANA;AAoBA,mBAAK,UAAL,EAAiB,MAAMD,CAAN,IAAW;AAC1B;AACA,MAAII,SAAS,mBAASC,SAAT,EAAb;;AAEA;AACA;AACA,MAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA;AACA,MAAIG,OAAO,MAAM,8BAAQ,EAACC,KAAM,GAAEJ,GAAI,IAAGC,OAAOI,QAAS,EAAhC,EAAmCC,MAAM,IAAzC,EAAR,CAAjB;;AAEA;AACAT,IAAEU,SAAF,CAAYJ,IAAZ,EAAkBF,MAAlB;;AAEAO,UAAQC,GAAR,CAAa,GAAET,GAAI,IAAGC,OAAOI,QAAS,qBAAtC;AACD,CAfD;AAgBA;AACA,mBAAK,QAAL,EAAe,MAAMR,CAAN,IAAW;AACxB,MAAII,SAAS,mBAASC,SAAT,EAAb;AACA,MAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,MAAIU,UAAU;AACZC,YAAQ,MADI;AAEZX,SAAKA,GAFO;AAGZM,UAAM,IAHM;AAIZH,UAAM;AACJS,mBAAaX,OAAOW,WADhB;AAEJC,WAAKZ,OAAOY,GAFR;AAGJC,cAAQb,OAAOc;AAHX,KAJM;AASZC,6BAAyB;AATb,GAAd;;AAYA,MAAIC,WAAW,MAAM,8BAAQP,OAAR,CAArB;;AAEAb,IAAEqB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACAtB,IAAEU,SAAF,CAAYU,SAASd,IAArB,EAA2BF,MAA3B;AACD,CApBD;;AAsBA,cAAKmB,IAAL,CAAU,aAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n// ava es para poder realizar los test\r\nimport test from 'ava'\r\n\r\n// send es el metodo para enviar respuestas\r\nimport micro from 'micro'\r\n\r\n// test-liste es una herramienta que me permite hacer test con microservicios\r\nimport listen from 'test-listen'\r\n\r\n// request-promise permite hacer http utilizando promesas\r\nimport request from 'request-promise'\r\n\r\n// importamos el modulu pictures el cual creamos para el sistema de enrutamiento\r\nimport pictures from '../pictures'\r\n\r\nimport fixtures from './fixtures'\r\n\r\ntest.beforeEach(async t => {\r\n  let servidor = micro(pictures)\r\n  t.context.url = await listen(servidor)\r\n})\r\n\r\n// GET /id es la primera ruta la cual es un test asincrono\r\ntest('GET /:id', async t => {\r\n  // generar un id como si fuera el id de la imagen\r\n  let imagen = fixtures.getImagen()\r\n\r\n  // listen retorna una url con url y puerto con el cual el servidor esta corriendo el puerto lo crea listen\r\n  // listenn retorna una promesa\r\n  let url = t.context.url\r\n\r\n  // hacer la peticion http diciendo que nos devuelva los datos en json\r\n  let body = await request({uri: `${url}/${imagen.publicId}`, json: true})\r\n\r\n  // con deepEquual validar que la imagen que tubo de esa ruta (body) es igual al objeto que obtiene de getImagen()\r\n  t.deepEqual(body, imagen)\r\n\r\n  console.log(`${url}/${imagen.publicId} esto es una prueba`)\r\n})\r\n// una de las caracteristicas de ava es definir el test sin implementar el test esto lo puedo hacer con todo\r\ntest('POST /', async t => {\r\n  let imagen = fixtures.getImagen()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    url: url,\r\n    json: true,\r\n    body: {\r\n      description: imagen.description,\r\n      src: imagen.src,\r\n      UserId: imagen.userId\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n\r\n  let response = await request(options)\r\n\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, imagen)\r\n})\r\n\r\ntest.todo('POST/:/like')\r\n"]}