{"version":3,"sources":["users-test.js"],"names":["beforeEach","t","servidor","context","url","user","getUsuario","options","method","uri","json","body","name","username","email","pasword","resolveWithFullResponse","response","is","statusCode","deepEqual","todo"],"mappings":"AAAA;AACA;;AACA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAEA;;;;;;AAHA;;;AANA;AAWA,cAAKA,UAAL,CAAgB,MAAMC,CAAN,IAAW;AACzB,MAAIC,WAAW,qCAAf;AACAD,IAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,QAAP,CAAtB;AACD,CAHD;;AARA;;;AANA;;;AAmBA,mBAAK,QAAL,EAAe,MAAMD,CAAN,IAAW;AACxB,MAAII,OAAO,mBAASC,UAAT,EAAX;AACA,MAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,MAAIG,UAAU;AACZC,YAAQ,MADI;AAEZC,SAAKL,GAFO;AAGZM,UAAM,IAHM;AAIZC,UAAM;AACJC,YAAMP,KAAKO,IADP;AAEJC,gBAAUR,KAAKQ,QAFX;AAGJC,aAAOT,KAAKS,KAHR;AAIJC,eAASV,KAAKU;AAJV,KAJM;AAUZ;AACA;AACA;AACAC,6BAAyB;AAbb,GAAd;;AAgBA,MAAIC,WAAW,MAAM,8BAAQV,OAAR,CAArB;;AAEA;AACA;AACA;;AAEA;AACAN,IAAEiB,EAAF,CAAKD,SAASE,UAAd,EAA0B,GAA1B;AACA;AACAlB,IAAEmB,SAAF,CAAYH,SAASN,IAArB,EAA2BN,IAA3B;AACD,CA9BD;;AAgCA,cAAKgB,IAAL,CAAU,gBAAV","file":"users-test.js","sourcesContent":["'use strict'\r\n// ava es para poder realizar los test\r\nimport test from 'ava'\r\n\r\n// send es el metodo para enviar respuestas\r\nimport micro from 'micro'\r\n\r\n// test-liste es una herramienta que me permite hacer test con microservicios\r\nimport listen from 'test-listen'\r\n\r\n// request-promise permite hacer http utilizando promesas\r\nimport request from 'request-promise'\r\n\r\n// importamos el modulu pictures el cual creamos para el sistema de enrutamiento\r\nimport users from '../users'\r\n\r\nimport fixtures from './fixtures'\r\n\r\ntest.beforeEach(async t => {\r\n  let servidor = micro(users)\r\n  t.context.url = await listen(servidor)\r\n})\r\n\r\ntest('POST /', async t => {\r\n  let user = fixtures.getUsuario()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      name: user.name,\r\n      username: user.username,\r\n      email: user.email,\r\n      pasword: user.pasword\r\n    },\r\n    // para verificar si respondio correctamen con el codigo\r\n    // resuelva la promesa con toda la respuesta\r\n    // reseolveWithFullResponse es una propiedad de reques promise\r\n    resolveWithFullResponse: true\r\n  }\r\n\r\n  let response = await request(options)\r\n\r\n  // yo no quiero que el usuario autenticarse mi api devuelva estos dos campos\r\n  // delete user.email\r\n  // delete user.pasword\r\n\r\n  // verificar que el statusCode sea igual a 201 osea que halla sido creado\r\n  t.is(response.statusCode, 201)\r\n  // garantizar que el objeto que e creado ose el body sea igual al usuario\r\n  t.deepEqual(response.body, user)\r\n})\r\n\r\ntest.todo('GET /:username')\r\n"]}