'use strict';
// ava es para poder realizar los test

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _micro = require('micro');

var _micro2 = _interopRequireDefault(_micro);

var _uuidBase = require('uuid-base62');

var _uuidBase2 = _interopRequireDefault(_uuidBase);

var _testListen = require('test-listen');

var _testListen2 = _interopRequireDefault(_testListen);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _pictures = require('../pictures');

var _pictures2 = _interopRequireDefault(_pictures);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// GET /id es la primera ruta la cual es un test asincrono


// request-promise permite hacer http utilizando promesas


// uuid es para trabajar con id
(0, _ava2.default)('GET /: ID', function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(t) {
    var id, servidor, url, body;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // generar un id como si fuera el id de la imagen
            id = _uuidBase2.default.v4();

            // cramos un servidor utilizando micro el cual recibe la funcion main que tiene los objetos res y req

            servidor = (0, _micro2.default)(_pictures2.default);

            // listen retorna una url con url y puerto con el cual el servidor esta corriendo el puerto lo crea listen
            // listenn retorna una promesa

            _context.next = 4;
            return (0, _testListen2.default)(servidor);

          case 4:
            url = _context.sent;
            _context.next = 7;
            return (0, _requestPromise2.default)({ url: url + '/' + id, json: true });

          case 7:
            body = _context.sent;


            // con deepEquual varlidar que el cuerpo que nos retorna es igual al objeto que obtiene el id
            t.deepEqual(body, { id: id });

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
// una de las caracteristicas de ava es definir el test sin implementar el test esto lo puedo hacer con todo


// importamos el modulu pictures el cual creamos para el sistema de enrutamiento


// test-liste es una herramienta que me permite hacer test con microservicios


// send es el metodo para enviar respuestas
_ava2.default.todo('POST /');
_ava2.default.todo('POST /:/like');
//# sourceMappingURL=..\node_modules\.cache\ava\d23d7933a0f78b2f0a4ac00c63341689.js.map