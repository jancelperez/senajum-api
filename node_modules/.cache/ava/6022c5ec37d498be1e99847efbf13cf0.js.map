{"version":3,"sources":["auth-test.js"],"names":["beforeEach","t","servidor","context","url","user","getUsuario","options","method","uri","body","username","password","json","token","decoded","verificarToken","secret","is"],"mappings":"AAAA;AACA;;AACA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;AAPA;;;AANA;AAeA,cAAKA,UAAL,CAAgB,MAAMC,CAAN,IAAW;AACzB,MAAIC,WAAW,oCAAf;AACAD,IAAEE,OAAF,CAAUC,GAAV,GAAgB,MAAM,0BAAOF,QAAP,CAAtB;AACD,CAHD;;AAKA;;;AAjBA;;;AANA;AAwBA,mBAAK,sBAAL,EAA6B,MAAMD,CAAN,IAAW;AACtC,MAAII,OAAO,mBAASC,UAAT,EAAX;AACA,MAAIF,MAAMH,EAAEE,OAAF,CAAUC,GAApB;;AAEA,MAAIG,UAAU;AACZC,YAAQ,MADI;AAEZC,SAAKL,GAFO;AAGZM,UAAM;AACJC,gBAAUN,KAAKM,QADX;AAEJC,gBAAUP,KAAKO;AAFX,KAHM;AAOZ;AACAC,UAAM;;AAGR;AAXc,GAAd,CAYA,IAAIC,QAAQ,MAAM,8BAAQP,OAAR,CAAlB;AACA,MAAIQ,UAAU,MAAM,gBAAMC,cAAN,CAAqBF,KAArB,EAA4B,iBAAOG,MAAnC,CAApB;;AAEAhB,IAAEiB,EAAF,CAAKH,QAAQJ,QAAb,EAAuBN,KAAKM,QAA5B;AACD,CApBD","file":"auth-test.js","sourcesContent":["'use strict'\r\n// ava es para poder realizar los test\r\nimport test from 'ava'\r\n\r\n// send es el metodo para enviar respuestas\r\nimport micro from 'micro'\r\n\r\n// test-liste es una herramienta que me permite hacer test con microservicios\r\nimport listen from 'test-listen'\r\n\r\n// request-promise permite hacer http utilizando promesas\r\nimport request from 'request-promise'\r\n\r\n// importamos el modulu pictures el cual creamos para el sistema de enrutamiento\r\nimport auth from '../auth'\r\n\r\nimport fixtures from './fixtures'\r\n\r\nimport utils from '../lib/utils'\r\n\r\nimport config from '../config'\r\n\r\ntest.beforeEach(async t => {\r\n  let servidor = micro(auth)\r\n  t.context.url = await listen(servidor)\r\n})\r\n\r\n// test para autenticacion\r\ntest('autenticacion POST /', async t => {\r\n  let user = fixtures.getUsuario()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    body: {\r\n      username: user.username,\r\n      password: user.password\r\n    },\r\n    // le eston diciendo que esto es formato json\r\n    json: true\r\n  }\r\n\r\n  // esto nos va a retonrnar un token\r\n  let token = await request(options)\r\n  let decoded = await utils.verificarToken(token, config.secret)\r\n\r\n  t.is(decoded.username, user.username)\r\n})\r\n"]}