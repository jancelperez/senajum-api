{"version":3,"sources":["pictures-test.js"],"names":["t","imagen","getImagen","servidor","req","res","url","body","publicId","json","deepEqual","console","log","todo"],"mappings":"AAAA;AACA;;AACA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAKA;;;;;;AAEA;;;AARA;;;AANA;AAeA,mBAAK,UAAL,EAAiB,MAAMA,CAAN,IAAW;AAC1B;AACA,MAAIC,SAAS,mBAASC,SAAT,EAAb;;AAEA;AACA,MAAIC,WAAW,qBAAM,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvC,qBAAKA,GAAL,EAAU,GAAV,EAAeJ,MAAf;AACD,GAFc,CAAf;AAGA;AACA;AACA;AACA,MAAIK,MAAM,MAAM,0BAAOH,QAAP,CAAhB;;AAEA;AACA,MAAII,OAAO,MAAM,8BAAQ,EAACD,KAAM,GAAEA,GAAI,IAAGL,OAAOO,QAAS,EAAhC,EAAmCC,MAAM,IAAzC,EAAR,CAAjB;;AAEA;AACAT,IAAEU,SAAF,CAAYH,IAAZ,EAAkBN,MAAlB;AACAU,UAAQC,GAAR,CAAY,OAAQL,IAApB;AACAI,UAAQC,GAAR,CAAY,OAAQX,MAApB;AACAU,UAAQC,GAAR,CAAYL,IAAZ;AACAI,UAAQC,GAAR,CAAYX,MAAZ;AACD,CAtBD;AAuBA;;;AA7BA;AACA;;AAPA;AAoCA,cAAKY,IAAL,CAAU,OAAV;AACA,cAAKA,IAAL,CAAU,aAAV","file":"pictures-test.js","sourcesContent":["'use strict'\r\n// ava es para poder realizar los test\r\nimport test from 'ava'\r\n\r\n// send es el metodo para enviar respuestas\r\nimport micro, {send} from 'micro'\r\n\r\n// test-liste es una herramienta que me permite hacer test con microservicios\r\nimport listen from 'test-listen'\r\n\r\n// request-promise permite hacer http utilizando promesas\r\nimport request from 'request-promise'\r\n\r\n// importamos el modulu pictures el cual creamos para el sistema de enrutamiento\r\n// import pictures from '../pictures'\r\n\r\nimport fixtures from './fixtures'\r\n\r\n// GET /id es la primera ruta la cual es un test asincrono\r\ntest('GET /:id', async t => {\r\n  // generar un id como si fuera el id de la imagen\r\n  let imagen = fixtures.getImagen()\r\n\r\n  // cramos un servidor utilizando micro el cual recibe la funcion main que tiene los objetos res y req\r\n  let servidor = micro(async (req, res) => {\r\n    send(res, 200, imagen)\r\n  })\r\n  // micro(pictures)\r\n  // listen retorna una url con url y puerto con el cual el servidor esta corriendo el puerto lo crea listen\r\n  // listenn retorna una promesa\r\n  let url = await listen(servidor)\r\n\r\n  // hacer la peticion http diciendo que nos devuelva los datos en json\r\n  let body = await request({url: `${url}/${imagen.publicId}`, json: true})\r\n\r\n  // con deepEquual validar que el cuerpo que nos retorna es igual al objeto que obtiene el id\r\n  t.deepEqual(body, imagen)\r\n  console.log(typeof (body))\r\n  console.log(typeof (imagen))\r\n  console.log(body)\r\n  console.log(imagen)\r\n})\r\n// una de las caracteristicas de ava es definir el test sin implementar el test esto lo puedo hacer con todo\r\ntest.todo('POST/')\r\ntest.todo('POST/:/like')\r\n"]}